CREATE DATABASE Questions
GO

USE Questions
GO

-- Given a large table with millions of rows, write a SQL query that retrieves the 1000 most recent rows based on a 
-- timestamp column, while also excluding duplicate rows.

CREATE TABLE MyTable (
    ID INT IDENTITY(1,1) PRIMARY KEY,
    Data VARCHAR(100),
    Timestamp DATETIME
);

-- Insert 1 million rows of data with random timestamps
DECLARE @i INT = 0;
WHILE @i < 1000000
BEGIN
    INSERT INTO MyTable (Data, Timestamp)
    VALUES
        (CONVERT(VARCHAR(100), NEWID()), DATEADD(SECOND, -@i, GETDATE()));
    SET @i = @i + 1;
END;

SELECT DISTINCT TOP 1000 * FROM MyTable
GO

-----------------------------------------------------------------------------------------------------

--Write a stored procedure that accepts a list of customer IDs and returns the total revenue 
--generated by those customers in the last 12 months. The procedure should use a dynamic SQL query 
--to generate the results based on the input parameters.

CREATE TABLE Customers (
    CustomerID INT IDENTITY(1,1) PRIMARY KEY,
    Name VARCHAR(100),
    Email VARCHAR(100)
);

CREATE TABLE Orders (
    OrderID INT IDENTITY(1,1) PRIMARY KEY,
    CustomerID INT,
    OrderDate DATETIME,
    TotalAmount DECIMAL(10,2)
);

-- Insert 1000 customers with random names and email addresses
DECLARE @i INT = 0;
DECLARE @alphabet varchar(26) = 'abcdefghijklmnopqrstuvwxyz'
DECLARE @len int
DECLARE @name varchar(50)
DECLARE @count int = 0
WHILE @i < 1000
BEGIN
	SET @len = 0
	SET @name = ''
	WHILE(@len < 5)
	BEGIN
		SET @name = @name + SUBSTRING(@alphabet,CAST(CEILING(RAND() * 26) as int), 1)
		SET @len = @len+1
	END
	IF EXISTS(SELECT Name FROM Customers WHERE Name = @name)
		SET @count = @count+1
	ELSE
	BEGIN
		INSERT INTO Customers (Name, Email)
		VALUES
			(@name, CONCAT(@name, (CEILING(RAND() * (10000-1+1))+1 ),'@gmail.com'));
		SET @i = @i + 1;
	END
END;

-- Insert 1 million orders with random customer IDs, order dates, and total amounts
DECLARE @j INT = 0;
WHILE @j < 1000000
BEGIN
    INSERT INTO Orders (CustomerID, OrderDate, TotalAmount)
    VALUES
        (FLOOR(RAND() * 1000) + 1, DATEADD(DAY, -FLOOR(RAND() * 365), GETDATE()), FLOOR(RAND() * 1000) + 1);
    SET @j = @j + 1;
END;

SELECT c.CustomerID, Name FROM Customers c INNER JOIN 
(SELECT CustomerID, ROW_NUMBER()OVER(PARTITION BY Name ORDER BY CustomerID)row_num FROM Customers)a 
	ON c.CustomerID = a.CustomerID
WHERE a.row_num >1

TRUNCATE TABLE Customers

SELECT * FROM Customers
SELECT * FROM Orders

SELECT
	CustomerID,
    SUM(TotalAmount) AS TotalRevenue
        FROM
            Orders		
        WHERE
            CustomerID IN (1,2,3,4,5,6,7,8,9,10)
            AND OrderDate >= DATEADD(MONTH, -12, GETDATE())
			GROUP BY CustomerID;
GO
-- Declare @T_variable table(name varchar(200))
CREATE OR ALTER PROCEDURE GetRevenueForCustomers
    @CustomerIDs VARCHAR(MAX)=''
AS
BEGIN
    DECLARE @sql NVARCHAR(MAX);
	IF(@CustomerIDs = '')
	BEGIN
		SET @sql = '
        SELECT
			CustomerID,
            SUM(TotalAmount) AS TotalRevenue
        FROM
            Orders
        WHERE
            CustomerID IN (SELECT CustomerID FROM Customers)
            AND OrderDate >= DATEADD(MONTH, -12, GETDATE())
		GROUP BY CustomerID	
		ORDER BY CustomerID';
	END
	ELSE
	BEGIN
		SET @sql = '
        SELECT
			CustomerID,
            SUM(TotalAmount) AS TotalRevenue
        FROM
            Orders
        WHERE
            CustomerID IN (' + @CustomerIDs + ')
            AND OrderDate >= DATEADD(MONTH, -12, GETDATE())
		GROUP BY CustomerID	';
	END
    
    EXEC sp_executesql @sql;
END;

EXEC GetRevenueForCustomers '1,2,3,4,5,6,7,8,9'
----------------------------------------------------------------------------------------------------------

--Write a query that finds the top 3 categories of products that have the highest revenue. 
--Include the category name and the total revenue.

-- create Categories table
CREATE TABLE Categories (
    CategoryID INT PRIMARY KEY,
    Name VARCHAR(50)
);

-- insert sample data into Categories table
INSERT INTO Categories (CategoryID, Name) VALUES
(1, 'Books'),
(2, 'Electronics'),
(3, 'Clothing');

-- create Products table
CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    Name VARCHAR(50),
    CategoryID INT,
    FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID)
);

-- insert sample data into Products table
INSERT INTO Products (ProductID, Name, CategoryID) VALUES
(1, 'Book A', 1),
(2, 'Book B', 1),
(3, 'Book C', 1),
(4, 'Phone A', 2),
(5, 'Phone B', 2),
(6, 'Laptop A', 2),
(7, 'Shirt A', 3),
(8, 'Shirt B', 3),
(9, 'Jeans A', 3);

-- create Orders table
CREATE TABLE Orders1 (
    OrderID INT PRIMARY KEY,
    OrderDate DATE
);

-- insert sample data into Orders table
INSERT INTO Orders1 (OrderID, OrderDate) VALUES
(1, '2022-01-01'),
(2, '2022-01-02'),
(3, '2022-02-01'),
(4, '2022-02-02'),
(5, '2022-03-01'),
(6, '2022-03-02');

-- create OrderItems table
CREATE TABLE OrderItems (
    OrderItemID INT PRIMARY KEY,
    OrderID INT,
    ProductID INT,
    Quantity INT,
    Price DECIMAL(10, 2),
    FOREIGN KEY (OrderID) REFERENCES Orders1(OrderID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);

-- insert sample data into OrderItems table
INSERT INTO OrderItems (OrderItemID, OrderID, ProductID, Quantity, Price) VALUES
(1, 1, 1, 2, 10.00),
(2, 1, 4, 1, 500.00),
(3, 2, 2, 3, 15.00),
(4, 2, 6, 1, 1000.00),
(5, 3, 3, 1, 20.00),
(6, 3, 5, 2, 800.00),
(7, 4, 1, 1, 8.00),
(8, 4, 7, 3, 30.00),
(9, 5, 2, 2, 25.00),
(10, 5, 8, 1, 50.00),
(11, 6, 3, 2, 30.00),
(12, 6, 9, 1, 75.00);


SELECT	c.CategoryID,
		c.Name CategoryName, 
		SUM(oi.Quantity * oi.Price) TotalRevenue
FROM OrderItems oi
	INNER JOIN Orders1 o ON oi.OrderID = o.OrderID
	INNER JOIN Products p ON oi.ProductID = p.ProductID
	INNER JOIN Categories c ON p.CategoryID = c.CategoryID
GROUP BY c.CategoryID, c.Name
ORDER BY TotalRevenue DESC
-------------------------------------------------------------------------------------------------


--Write a query that finds all pairs of customers who have purchased the same set of products. 
--Return the IDs of the two customers, and the IDs of the products they have in common.

CREATE TABLE P_Customers (
  ID INT PRIMARY KEY,
  Name VARCHAR(50),
  Email VARCHAR(50)
);

CREATE TABLE P_Products (
  ID INT PRIMARY KEY,
  Name VARCHAR(50)
);

CREATE TABLE P_Transactions (
  ID INT PRIMARY KEY,
  CustomerID INT,
  ProductID INT,
  Date DATE,
  FOREIGN KEY (CustomerID) REFERENCES P_Customers(ID),
  FOREIGN KEY (ProductID) REFERENCES P_Products(ID)
);

INSERT INTO P_Customers VALUES
(1, 'John', 'john@example.com'),
(2, 'Jane', 'jane@example.com'),
(3, 'Bob', 'bob@example.com'),
(4, 'Alice', 'alice@example.com'),
(5, 'Dave', 'dave@example.com');

INSERT INTO P_Products VALUES
(1, 'Product A'),
(2, 'Product B'),
(3, 'Product C'),
(4, 'Product D'),
(5, 'Product E');

INSERT INTO P_Transactions VALUES
(1, 1, 1, '2022-01-01'),
(2, 1, 2, '2022-01-02'),
(3, 2, 1, '2022-01-03'),
(4, 2, 2, '2022-01-04'),
(5, 2, 3, '2022-01-05'),
(6, 3, 1, '2022-01-06'),
(7, 3, 3, '2022-01-07'),
(8, 3, 4, '2022-01-08'),
(9, 4, 2, '2022-01-09'),
(10, 4, 3, '2022-01-10'),
(11, 4, 5, '2022-01-11'),
(12, 5, 1, '2022-01-12'),
(13, 5, 2, '2022-01-13'),
(14, 5, 3, '2022-01-14'),
(15, 5, 5, '2022-01-15');

SELECT TOP 1 * FROM P_Customers
SELECT TOP 1 * FROM P_Products
SELECT TOP 1 * FROM P_Transactions

--Write a query that finds all pairs of customers who have purchased the same set of products. 
--Return the IDs of the two customers, and the IDs of the products they have in common.

SELECT DISTINCT c1.ID, c2.ID, t1.ProductID 
FROM P_Transactions t1
	INNER JOIN P_Transactions t2 ON t1.ProductID = t2.ProductID AND t1.ID <> t2.ID
	INNER JOIN P_Customers c1 ON t1.CustomerID = c1.ID
	INNER JOIN P_Customers c2 ON t2.CustomerID = c2.ID
WHERE NOT EXISTS(
	SELECT t3.ProductID
    FROM P_Transactions t3
    WHERE t3.CustomerID = c1.ID AND NOT EXISTS (
        SELECT *
        FROM P_Transactions t4
        WHERE t4.CustomerID = c2.ID AND  t3.ProductID = t4.ProductID
    )
)
ORDER BY C1.ID, C2.ID, T1.ProductID

-------------------------------------------------------------------------------------------------

-- Write a query that finds the customers who have placed orders in every month of the current year. 
-- Return the customer ID, name, and the number of months they have placed orders.

-- Sample Customers table
CREATE TABLE C_Customers (
  CustomerID INT PRIMARY KEY,
  Name VARCHAR(50)
);

-- Sample Orders table
CREATE TABLE C_Orders (
  OrderID INT PRIMARY KEY,
  CustomerID INT,
  OrderDate DATETIME
);

-- Insert sample data into Customers table
INSERT INTO C_Customers (CustomerID, Name)
VALUES (1, 'John Smith'), (2, 'Jane Doe'), (3, 'Bob Johnson');

-- Insert sample data into Orders table
INSERT INTO C_Orders (OrderID, CustomerID, OrderDate)
VALUES 
  (1, 1, '2023-02-01'),
  (2, 2, '2023-02-01'),
  (3, 3, '2023-02-01'),
  (4, 1, '2023-01-01'),
  (5, 2, '2023-01-01'),
  (6, 3, '2023-01-01'),
  (7, 1, '2022-12-01'),
  (8, 2, '2022-12-01'),
  (9, 3, '2022-12-01');

SELECT * FROM C_Customers
SELECT * FROM C_Orders ORDER BY CustomerID, OrderDate




-- Query to find customers who have placed orders in every month of the current year
;WITH Months AS (
  SELECT 1 AS MonthNumber
  UNION ALL SELECT 2
  UNION ALL SELECT 3
  UNION ALL SELECT 4
  UNION ALL SELECT 5
  UNION ALL SELECT 6
  UNION ALL SELECT 7
  UNION ALL SELECT 8
  UNION ALL SELECT 9
  UNION ALL SELECT 10
  UNION ALL SELECT 11
  UNION ALL SELECT 12
),
CurrentYearMonths AS (
  SELECT MonthNumber
  FROM Months
  WHERE MonthNumber <= MONTH(GETDATE())
)
SELECT 
  c.CustomerID, 
  c.Name, 
  COUNT(DISTINCT MONTH(o.OrderDate)) AS MonthsWithOrders
FROM C_Customers c
INNER JOIN C_Orders o ON c.CustomerID = o.CustomerID
INNER JOIN CurrentYearMonths y ON MONTH(o.OrderDate) = y.MonthNumber
GROUP BY c.CustomerID, c.Name
HAVING COUNT(DISTINCT MONTH(o.OrderDate)) = MONTH(GETDATE());
-----------------------------------------------------------------------------------------------

--Write a query that returns the top 5 customers who have spent the most money in the last year. 
--Include the customer's name, email address, total amount spent, and the number of orders they placed.

CREATE TABLE T_Customers (
  CustomerID INT,
  Name VARCHAR(50),
  Email VARCHAR(50),
  CONSTRAINT PK_T_Customers_CustomerID PRIMARY KEY (CustomerID)
);

CREATE TABLE T_Transactions (
  TransactionID INT,
  CustomerID INT,
  TransactionDate DATE,
  Amount DECIMAL(10, 2),
  CONSTRAINT PK_T_Transactions_TransactionID PRIMARY KEY (TransactionID),
  CONSTRAINT FK_T_Transactions_CustomerID FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

INSERT INTO T_Customers (CustomerID, Name, Email)
VALUES (1, 'John Smith', 'john.smith@example.com'),
       (2, 'Jane Doe', 'jane.doe@example.com'),
       (3, 'Bob Johnson', 'bob.johnson@example.com'),
       (4, 'Alice Williams', 'alice.williams@example.com'),
       (5, 'Tom Brown', 'tom.brown@example.com');

INSERT INTO T_Transactions (TransactionID, CustomerID, TransactionDate, Amount)
VALUES (1, 1, '2022-01-01', 100.00),
       (2, 1, '2022-02-01', 200.00),
       (3, 1, '2022-03-01', 300.00),
       (4, 2, '2022-01-01', 50.00),
       (5, 2, '2022-02-01', 75.00),
       (6, 3, '2022-02-01', 500.00),
       (7, 3, '2022-03-01', 1000.00),
       (8, 4, '2022-01-01', 150.00),
       (9, 4, '2022-02-01', 250.00),
       (10, 4, '2022-03-01', 350.00),
       (11, 5, '2022-03-01', 100.00);

--Write a query that returns the top 5 customers who have spent the most money in the last year. 
--Include the customer's name, email address, total amount spent, and the number of orders they placed.



SELECT	c.CustomerID, c.Name, SUM(t.Amount) TotalAmt, COUNT(t.TransactionID) OrderNums
FROM	T_Customers c 
		INNER JOIN T_Transactions t 
			ON c.CustomerID = t.CustomerID
WHERE t.TransactionDate > DATEADD(YEAR,-1,GETDATE())
GROUP BY c.CustomerID, c.Name, c.Email
ORDER BY TotalAmt Desc

--------------------------------------------------------------------------------------------------------

